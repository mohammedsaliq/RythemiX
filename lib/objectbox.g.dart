// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/object_box_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2236037415567185548),
      name: 'SongsEntity',
      lastPropertyId: const obx_int.IdUid(9, 2334574070248934543),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1115371175667819859),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2185408789924014034),
            name: 'data',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5415948308094860687),
            name: 'artistId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5680918604886119653),
            name: 'uri',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5246120938186466072),
            name: 'album',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3328387613233093370),
            name: 'artist',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1782357366595134709),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 819932568398650533),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2334574070248934543),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 2236037415567185548),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1691356863556541961],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7596831694045033042,
        1997285577364667060,
        183787324603405807,
        1043389404652584181,
        8984500441637289622,
        1800716600404644161,
        5902814518794997125,
        705016222739777811,
        2918486624237471371,
        257000298153720914,
        2747993777051502397,
        548470016310156392,
        2037773097350022632,
        6613828157414030351
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    SongsEntity: obx_int.EntityDefinition<SongsEntity>(
        model: _entities[0],
        toOneRelations: (SongsEntity object) => [],
        toManyRelations: (SongsEntity object) => {},
        getId: (SongsEntity object) => object.id,
        setId: (SongsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SongsEntity object, fb.Builder fbb) {
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          final uriOffset =
              object.uri == null ? null : fbb.writeString(object.uri!);
          final albumOffset =
              object.album == null ? null : fbb.writeString(object.album!);
          final artistOffset =
              object.artist == null ? null : fbb.writeString(object.artist!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dataOffset);
          fbb.addInt64(2, object.artistId);
          fbb.addOffset(3, uriOffset);
          fbb.addOffset(4, albumOffset);
          fbb.addOffset(5, artistOffset);
          fbb.addInt64(6, object.duration);
          fbb.addOffset(7, titleOffset);
          fbb.addOffset(8, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final uriParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final albumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final artistParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final durationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = SongsEntity(
              id: idParam,
              data: dataParam,
              uri: uriParam,
              album: albumParam,
              artist: artistParam,
              duration: durationParam,
              title: titleParam)
            ..artistId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [SongsEntity] entity fields to define ObjectBox queries.
class SongsEntity_ {
  /// see [SongsEntity.id]
  static final id =
      obx.QueryIntegerProperty<SongsEntity>(_entities[0].properties[0]);

  /// see [SongsEntity.data]
  static final data =
      obx.QueryStringProperty<SongsEntity>(_entities[0].properties[1]);

  /// see [SongsEntity.artistId]
  static final artistId =
      obx.QueryIntegerProperty<SongsEntity>(_entities[0].properties[2]);

  /// see [SongsEntity.uri]
  static final uri =
      obx.QueryStringProperty<SongsEntity>(_entities[0].properties[3]);

  /// see [SongsEntity.album]
  static final album =
      obx.QueryStringProperty<SongsEntity>(_entities[0].properties[4]);

  /// see [SongsEntity.artist]
  static final artist =
      obx.QueryStringProperty<SongsEntity>(_entities[0].properties[5]);

  /// see [SongsEntity.duration]
  static final duration =
      obx.QueryIntegerProperty<SongsEntity>(_entities[0].properties[6]);

  /// see [SongsEntity.title]
  static final title =
      obx.QueryStringProperty<SongsEntity>(_entities[0].properties[7]);

  /// see [SongsEntity.displayName]
  static final displayName =
      obx.QueryStringProperty<SongsEntity>(_entities[0].properties[8]);
}
